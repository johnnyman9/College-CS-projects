{\rtf\ansi{\fonttbl{\f1\fmodern Courier New;}{\f2\fnil CSD14;}}{\colortbl\red0\green0\blue0;}
{\fs20\f1\cf0   1 /***********************************************************\line   2 This is a Adventure class for the Adventure game\line   3 a Room has a description only at this point\line   4 The constructor is written for you.\line   5 You may not have to change it... write appropriate methods\line   6 Some have been stubbed out for you.\line   7 \line   8 @version .01 - Johnny Haizel-Cobbina (<- put your name here)\line   9 \line  10 ************************************************************/\line  11 //Need to implement serializable now.\line  12 import java.util.Scanner;\line  13 import java.util.StringTokenizer;\line  14 import java.io.*;\line  15 import java.util.Random;\line  16 \line  17 public class Adventure\line  18 \'7b\line  19    private final static int numCols = 3;\line  20    private final static int numRows = 3;\line  21    private final static int maxCol = numCols - 1;\line  22    private final static int maxRow = numRows - 1;\line  23    Scanner kb;\line  24    int num;\line  25    String dropNumber;\line  26    String command;\line  27    String direction;\line  28    Player player;\line  29    private Room[][] rooms;\line  30    boolean notWin = true;\line  31    private final boolean DEBUG = true;\line  32    public static int emptyIndex;\line  33    public static int emptyIndex1;\line  34    public static int itemNumber = 0;\line  35    private static int invNumber = 0;\line  36    private final static int roomItems = 3;\line  37    private final static int playerItems = 3;\line  38   \line  39    \line  40    public Adventure()\line  41    \'7b\line  42       kb = new Scanner(System.in);//\line  43       initGame();//calls the initGame method\line  44       initPlayer();//calls the Player method\line  45       playGame();//Calls the playGame method\line  46       \line  47    \'7d\line  48    \line  49    public void playGame()\line  50    \'7b\line  51       \line  52       while(notWin)//While not win is true, this will keep running\line  53       \'7b\line  54          \line  55        //allow move\line  56       //Prints out the room they are in as well as the decription\line  57       System.out.print(rooms[player.getxPos()][player.getyPos()].getDesc() + "\'5cn");\line  58     \line  59       System.out.print("Possible moves: ");\line  60       //This will check for the possible moves based on where the player is\line 61       if(player.getyPos() + 1 < numRows)\line  62       \'7b\line  63          System.out.print(" South ");\line  64       \'7d\line  65       if(player.getxPos() + 1 < numCols)\line 66       \'7b\line  67          System.out.print(" East");\line  68       \'7d\line  69       if(player.getyPos() - 1 >= 0)\line  70       \'7b\line  71          System.out.print(" North ");\line  72       \'7d\line  73       if(player.getxPos() - 1 >= 0)\line  74       \'7b\line  75          System.out.print(" West  ");\line  76       \'7d\line  77        for(int x = 0; x < playerItems; x++)\line  78         \'7b\line  79           if(player.getItem(x) != null)\line  80           \'7b\line  81                 System.out.print("\'5cnInventory: ");\line  82                 System.out.print(player.getItemName(x));\line  83           \'7d\line  84         \'7d      \line  85       \line  86       System.out.print("\'5cnYou see: ");\line  87     //to look through the objects in the room  \line  88            if (player.getxPos() == 0 && player.getyPos() == 0)\line  89             \'7b\line 90              for (int i = 0; i <= 2; i ++)\line  91              \'7b\line  92                 System.out.println("\'5cn" + (i+1) + ": " + rooms[0][0].getObject(i));\line  93                 \'7d\line  94             \'7d\line  95             \line  96             if (player.getxPos() == 0 && player.getyPos() == 1)\line  97             \'7b\line  98              for (int i = 0; i <= 2; i ++)\line  99              \'7b\line 100                 System.out.println("\'5cn" + (i+1) + ": " + rooms[0][1].getObject(i));\line 101                 \'7d\line 102             \'7d\line 103             \line 104             if (player.getxPos() == 0 && player.getyPos() == 2)\line 105             \'7b\line 106              for (int i = 0; i <= 2; i ++)\line 107              \'7b\line 108                 System.out.println("\'5cn" + (i+1) + ": " + rooms[0][2].getObject(i));\line 109                 \'7d\line 110             \'7d\line 111             \line 112             if (player.getxPos() == 1 && player.getyPos() == 0)\line 113             \'7b\line 114              for (int i = 0; i <= 2; i ++)\line 115              \'7b\line 116                 System.out.println("\'5cn" + (i+1) + ": " + rooms[1][0].getObject(i));\line 117                 \'7d\line 118             \'7d\line 119             \line 120             if (player.getxPos() == 1 && player.getyPos() == 1)\line121             \'7b\line 122              for (int i = 0; i <= 2; i ++)\line 123              \'7b\line 124                 System.out.println("\'5cn" + (i+1) + ": " + rooms[1][1].getObject(i));\line 125                 \'7d\line 126             \'7d\line 127             \line 128             if (player.getxPos() == 1 && player.getyPos() == 2)\line 129             \'7b\line 130              for (int i = 0; i <= 2; i ++)\line 131              \'7b\line 132                 System.out.println("\'5cn" + (i+1) + ": " + rooms[1][2].getObject(i));\line 133                 \'7d\line 134             \'7d\line 135             \line 136             if (player.getxPos() == 2 && player.getyPos() == 0)\line 137             \'7b\line 138              for (int i = 0; i <= 2; i ++)\line 139              \'7b\line 140                 System.out.println("\'5cn" + (i+1) + ": " + rooms[2][0].getObject(i));\line 141                 \'7d\line 142             \'7d\line 143             \line 144             if (player.getxPos() == 2 && player.getyPos()== 1)\line 145             \'7b\line 146              for (int i = 0; i <= 2; i ++)\line 147              \'7b\line 148                 System.out.println("\'5cn" + (i+1) + ": " + rooms[2][1].getObject(i));\line 149                 \'7d\line 150             \'7d\line 151             \line 152             if (player.getxPos() == 2 && player.getyPos() == 2)\line 153             \'7b\line 154              for (int i = 0; i <= 2; i ++)\line 155              \'7b\line 156                 System.out.println("\'5cn" + (i+1) + ": " + rooms[2][2].getObject(i));\line 157              \'7d\line 158             \'7d\line 159 \line 160       System.out.print("\'5cn" + player.getName() + ", " + \line 161       "What would you like to do next." +\line 162       " Enter GET ITEM to select an item and Enter DROP ITEM to select an item to drop." +\line 163       " Type exit to quit: "); \line 164       \line 165             \line 166       command(kb.nextLine());\line 167   \line 168 \line 169                   \line 170          //continue until player quits\line 171         \line 172          //check win condidtion           \line 173       \'7d\line 174    \'7d\line 175    \line 176    /******************************************************\line 177     * the method parses command and calls methods that carry out the command\line 178     * i.e. Move North, will call the move method with North as the argumant.  \line 179     * the move method will check to see if the move is leagal, then move the players xPos and yPos\line 180     * Sets user input equal to boy or girl\line 181     * @param args String command\line 182     * @return result\line 183     ******************************************************/  \line 184    public boolean command(String command)\line 185    \'7b\line 186       boolean result = true;\line 187      String[] parts = command.split(" "); \line 188      if(command.contains("Move")||command.contains("move"))\line 189      \'7b\line 190         move(parts[1]);\line 191      \'7d\line 192      else if(command.contains("get") || command.contains("pick up"))\line 193      \'7b\line 194          pickUp(parts[1]);   \line 195      \'7d\line 196      else if(command.contains("drop") || command.contains("Drop"))\line 197      \'7b\line 198          dropItem(parts[1]);\line 199      \'7d\line 200      else if(command.contains("save")||command.contains("Save"))\line 201      \'7b\line 202         saveRoom();\line 203      \'7d\line 204      \line 205     else if(command.contains("load"))\line 206     \'7b\line 207       load();\line 208     \'7d\line 209 \line 210      else\line 211       System.out.print("I dont understand your command. " +\line 212        "What would you like to do next. Type exit to quit:\'5cn ");\line 213       System.out.print("Enter Save to save your game. And load to Load previous game");\line 214       result = false;\line 215      \line 216       return result;\line 217          \line 218    \'7d\line 219    \line 220 \line 221    /******************************************************\line 222     * this method will do error checking for moves within the 2D array, \line 223     * and adjust a players xPos and yPos\line 224     * @param args String Direction\line 225     * @return \line226     ******************************************************/  \line 227    public void move(String direction)\line 228    \'7b  \line 229               \line 230          if(direction.equals("North") || direction.equals("north"))\line 231          \'7b\line 232             if(player.getyPos() == 0)//at 0, there is no place to more north\line 233             \'7b\line 234                System.out.print("Try again, you cant move there\'5cn");\line 235             \'7d\line 236             else\line 237             \'7b\line 238                player.moveNorth();\line 239             \'7d\line 240        \line 241          \'7d\line 242          else if(direction.equals("South") || direction.equals("south"))\line 243          \'7b\line 244             if(player.getyPos() == maxRow)//at maxRow, which is 3, there is no souuth option\line 245             \'7b\line 246                System.out.print("Try again, you cant move there\'5cn");\line 247             \'7d\line 248             else\line 249             \'7b\line 250                player.moveSouth();\line 251             \'7d\line 252        \line 253          \'7d\line 254          else if(direction.equals("West") || direction.equals("west"))\line 255          \'7b\line 256             if(player.getxPos() == 0)// when the x value is 0, there is no west option\line 257             \'7b\line 258                System.out.print("Try again, you cant move there\'5cn");\line 259             \'7d\line 260             else\line 261             \'7b\line 262                player.moveWest();\line263             \'7d\line 264        \line 265          \'7d\line 266         else if(direction.equals("East") || direction.equals("east"))\line 267          \'7b\line 268             if(player.getxPos() == maxCol)//When the player position is at maxCol, there is no east option\line 269             \'7b\line 270                System.out.print("Try again, you cant move there\'5cn");\line 271             \'7d\line 272             else\line 273             \'7b\line 274                player.moveEast();\line 275             \'7d\line 276        \line 277          \'7d\line 278 \line 279              \line 280    \'7d\line 281    \line 282   /******************************************************\line 283     *Ask the player their name and create the player object...\line 284     * @param args \line 285     * @return \line 286     ******************************************************/  \line 287    public void initPlayer()\line 288    \'7b  \line 289        //ASK USER FOR NAME\line 290       System.out.print("Enter name: ");\line 291       String name = kb.nextLine();\line 292 \line 293       //ASK USER FOR NAME\line 294      player = new Player(name,0,0);// This is where the player starting point is located\line 295       System.out.print("");\line 296    \'7d\line 297    \line 298     \line 299    /******************************************************\line 300     * create the array and all the rooms in the array. \line 301     * This instantiates the rooms of the 2D array \line 302     * @param args\line 303     * @return \line 304     ******************************************************/  \line 305    public void initGame()\line 306    \'7b     \line 307       rooms = new Room[numRows][numCols];     \line 308 \line 309       rooms[0][0] = new Room("(Foyer of a small cabin) "+ "You are standing in the foyer of a small cabin\'5cn", "");\line 310       rooms[0][0].setObject(0," ");\line 311       rooms[0][0].setObject(1," ");//This empty but usable for later expantion\line 312       rooms[0][0].setObject(2," ");//This empty but usable for later expantion\line 313    \line 314       rooms[0][1] = new Room("(Dinning room) "+ "You are standing in a huge dining room.\'5cn","");\line 315       rooms[0][1].setObject(0,"");//This empty but usable for later expantion\line 316       rooms[0][1].setObject(1,"");\line 317       rooms[0][1].setObject(2,"");\line 318       \line 319       rooms[0][2] = new Room("(Bathroom) " + "You are standing in the bathroom.  You see a mirror.\'5cn","");\line 320       rooms[0][2].setObject(0," ");\line 321       rooms[0][2].setObject(1," ");\line 322       rooms[0][2].setObject(2," ");//This empty but usable for later expantion\line 323       \line 324       rooms[1][0] = new Room("(Bigger Dinning room) " + "You are standing in a huge dining room.\'5cn","");\line 325       rooms[1][0].setObject(0,"");//This empty but usable for later expantion\line 326       rooms[1][0].setObject(1,"");\line 327       rooms[1][0].setObject(2,"");\line 328       \line 329       rooms[1][1] = new Room("(Long hallway) " + "You are in a long hallway.\'5cn","");\line 330       rooms[1][1].setObject(0,"Oil Lamp");\line 331       rooms[1][1].setObject(1," ");\line 332       rooms[1][1].setObject(2," ");\line 333       \line 334       rooms[1][2] = new Room("(Kitchen)" + "You are standing in the Kitchen\'5cn","");\line 335       rooms[1][2].setObject(0," ");//This empty but usable for later expantion\line 336       rooms[1][2].setObject(1," ");\line 337       rooms[1][2].setObject(2," ");\line 338       \line 339       rooms[2][0] = new Room("(Living room) " + \line 340       "You are standing in the living room, next to the fireplace.\'5cn","");\line 341       rooms[2][0].setObject(0,"Book");//This empty but usable for later expantion\line 342       rooms[2][0].setObject(1," ");\line 343       rooms[2][0].setObject(2," ");\line 344       \line 345       rooms[2][1] = new Room("(Other side of Living room)"+ \line 346      "You are standing in the living room.  You see a couch and a fireplace.\'5cn","");\line 347       rooms[2][1].setObject(0," ");//This empty but usable for later expantion\line 348       rooms[2][1].setObject(1," ");\line 349       rooms[2][1].setObject(2," ");\line 350       \line 351       rooms[2][2] = new Room("(Breakfast Nook) "+\line 352       "This is a breakfast nook.  You see a small table with chairs.\'5cn","" );\line 353       rooms[2][2].setObject(0,"Key");//This empty but usable for later expantion\line 354       rooms[2][2].setObject(1," ");\line 355       rooms[2][2].setObject(2," ");    \line 356    \'7d\line 357    /******************************************************\line 358     * This is my drop item class, this allows the user to access inventory\line 359       and if the room is empty, the user will be able to drop any of their\line 360       inventory items.\line 361     * @param String dropNumber\line 362     * @return \line 363     ******************************************************/\line 364   public void dropItem(String dropNumber)\line 365   \'7b\line 366     if(rooms[player.getxPos()][player.getyPos()].getObject(0) == null || \line 367     rooms[player.getxPos()][player.getyPos()].getObject(1) == null || \line 368     rooms[player.getxPos()][player.getyPos()].getObject(2) == null )\line 369      \'7b\line 370           for(int x = 0; x < playerItems; x++)\line 371           \'7b\line 372             if(player.getItem(x) != null)\line 373             \'7b\line 374                System.out.println("" + (x+1) + ":" + player.getItemName(x));\line 375             \'7d\line 376           \'7d\line 377                System.out.print("Select the number of the item you wish to drop: " + \line 378                "if none, enter 4: ");\line 379                dropNumber = kb.nextLine();\line 380          for(int x = playerItems-1; x >= 0; x--)\line381          \'7b\line 382                if(rooms[player.getxPos()][player.getyPos()].getObject(x) == null)\line 383                \'7b\line 384                   emptyIndex1 = x;\line 385                \'7d\line 386          \'7d\line 387                if (dropNumber.equals("1"))\line 388                \'7b\line 389                    rooms[player.getxPos()][player.getyPos()].setObject(emptyIndex1, player.getItemName(0));\line 390                    player.setItem(0, player.getItem(1));\line 391                    player.setItem(1, player.getItem(2));\line 392                    player.setItem(2, null);\line 393                    invNumber--;//decriments when they pick the item they want to drop\line 394                \'7d\line 395           \line 396                if(dropNumber.equals("2"))\line 397                \'7b\line 398                 rooms[player.getxPos()][player.getyPos()].setObject(emptyIndex1, player.getItemName(1));\line 399                 player.setItem(1, player.getItem(2));\line 400                 player.setItem(2,null);\line 401                 invNumber--;\line 402              \'7d           \line403              if (dropNumber.equals("3"))\line 404              \'7b\line 405                 rooms[player.getxPos()][player.getyPos()].setObject(emptyIndex1, player.getItemName(2));\line 406                 player.setItem(2, null);\line 407                 invNumber--;\line 408              \'7d            \line 409     \'7d\line 410  \'7d\line 411     /******************************************************\line 412     * This is pickUp my pick up method. Once the user enters "get item",\line 413       if there are items this will allow the user to pick them up and put them \line 414       into the inventory\line 415     *\line 416     * @param String pickUp\line 417     * @return \line 418     ******************************************************/\line 419   public void pickUp(String pickUp)\line 420   \'7b\line 421      System.out.println("Enter the number of the item you want to pick up:  "\line 422       + "Enter 4 to continue");\line 423      pickUp = kb.nextLine();\line 424             \line 425      for(int x = playerItems-1; x >= 0; x--)\line 426      \'7b\line 427              if (player.getItem(x) == null)\line 428              \'7b\line 429                 emptyIndex = x;   \line 430              \'7d\line 431      \'7d\line 432     \line 433      if(pickUp.equals("1"))\line 434      \'7b             \line 435        if(itemNumber < 3)\line 436         \'7b\line 437           System.out.println("You picked up a: " +\line 438            rooms[player.getxPos()][player.getyPos()].getObject(0));\line 439           itemNumber++;\line 440           player.setItem(emptyIndex, rooms[player.getxPos()][player.getyPos()].getAdd(0));\line 441           rooms[player.getxPos()][player.getyPos()].setObject(0,null);\line 442           System.out.println(player.getName() + "'s inventory ");\line 443         \'7d\line 444        else\line 445         \'7b\line 446           System.out.println("Can't add more items...");\line 447           System.out.println(player.getName() + "'s inventory ");\line 448         \'7d\line 449     \'7d\line 450     if(pickUp.equals("2"))\line 451     \'7b           \line 452       if (itemNumber < 3)//Make sure this is less than 3\line 453       \'7b\line 454         System.out.println("You picked up a: " + \line 455         rooms[player.getxPos()][player.getyPos()].getObject(1));\line 456         itemNumber++;\line 457         player.setItem(emptyIndex, rooms[player.getxPos()][player.getyPos()].getAdd(1));\line 458         rooms[player.getxPos()][player.getyPos()].setObject(1, null);\line 459         System.out.println(player.getName() + "'s inventory");\line 460       \'7d\line 461       else\line 462       \'7b\line 463        System.out.println("Can't add more items...");\line 464        System.out.println(player.getName() + "'s inventory");\line 465       \'7d\line 466     \'7d\line 467     if(pickUp.equals("3"))\line 468     \'7b\line 469       if(itemNumber < 3)\line 470        \'7b\line 471          System.out.println("You picked up a: " + \line 472          rooms[player.getxPos()][player.getyPos()].getObject(2));\line 473          itemNumber++;//so the user can't carry more than 3\line 474          player.setItem(emptyIndex, rooms[player.getxPos()][player.getyPos()].getAdd(2));\line 475          System.out.println(player.getName() + "'s inventory ");\line 476          rooms[player.getxPos()][player.getyPos()].setObject(2, null);\line 477        \'7d\line 478        else\line 479        \'7b\line 480          System.out.println("Can't add more items...");\line 481          System.out.println(player.getName() + "'s inventory ");\line 482        \'7d\line 483     \'7d\line 484     if(pickUp.equals("4"))//To Continue\line 485     \'7b\line 486       System.out.println("No item Selected.");\line 487     \'7d\line 488     for(int x = 0; x < playerItems; x++)\line 489     \'7b\line 490       if(player.getItem(x)!= null)//if it is not empty\line 491       \'7b\line 492         System.out.println((x + 1) + ": " + player.getItemName(x));\line 493       \'7d\line 494     \'7d\line 495  \'7d\line 496    \line 497    \line 498 public void saveRoom()\line 499 \'7b\line 500 \line 501     System.out.println("YOUR GAME HAS BEEN SAVED");\line 502   try      \line 503   \'7b\line 504     FileOutputStream gameFile = new FileOutputStream("savingGame.ser");\line 505     ObjectOutputStream out = new ObjectOutputStream(gameFile);\line 506     out.writeObject(player);\line 507     out.writeObject(rooms);\line 508     gameFile.close();\line 509   \'7d\line 510   catch(IOException e)\line 511   \'7b\line 512      e.printStackTrace();\line 513   \'7d\line 514 \'7d\line 515 public void load()\line 516 \'7b\line 517     System.out.println("YOUR GAME HAS BEEN LOADED\'5cn");\line 518 \line 519    try\line 520    \'7b\line 521       FileInputStream gameFile = new FileInputStream("savingGame.ser");\line 522       ObjectInputStream in = new ObjectInputStream(gameFile);\line 523       player = (Player)in.readObject();\line 524       rooms = (Room[][])in.readObject();\line 525       in.close();\line 526       gameFile.close();\line 527    \'7d\line 528    catch(IOException iOError)\line 529    \'7b\line 530      iOError.printStackTrace();\line 531    \'7d\line 532    catch(ClassNotFoundException classNotFound)\line 533    \'7b\line 534      System.out.println("The Player class not found\'5cn");\line 535      classNotFound.printStackTrace();\line 536    \'7d\line 537 \'7d         \line 538  \line 539 \'7d}}